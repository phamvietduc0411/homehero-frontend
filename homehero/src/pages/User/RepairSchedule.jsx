import React, { useState } from 'react';
import UserSidebarMenu from '../../components/User/UserSidebarMenu';
import '../../styles/User/DashboardPage.css'; // Import the general dashboard styles
import '../../styles/User/RepairSchedule.css'; // Import the specific CSS for this page



const RepairSchedule = ({ onNavigateToTracking }) => {
  console.log('RepairSchedule component loaded!');
  const [formData, setFormData] = useState({
    serviceType: '',
    applianceType: '',
    description: '',
    preferredDate: '',
    preferredTime: '',
    address: '',
    customerName: '',
    customerPhone: '',
    urgencyLevel: 'normal',
    images: []
  });

  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Danh s√°ch d·ªãch v·ª•
  const serviceTypes = [
    { id: 'electrical', name: 'S·ª≠a ch·ªØa ƒëi·ªán', icon: 'üîå', basePrice: '200,000 ‚Ç´' },
    { id: 'plumbing', name: 'S·ª≠a ch·ªØa n∆∞·ªõc', icon: 'üöø', basePrice: '150,000 ‚Ç´' },
    { id: 'aircon', name: 'S·ª≠a ch·ªØa ƒëi·ªÅu h√≤a', icon: '‚ùÑÔ∏è', basePrice: '300,000 ‚Ç´' },
    { id: 'washing-machine', name: 'S·ª≠a m√°y gi·∫∑t', icon: 'üß∫', basePrice: '250,000 ‚Ç´' },
    { id: 'refrigerator', name: 'S·ª≠a t·ªß l·∫°nh', icon: 'üßä', basePrice: '280,000 ‚Ç´' },
    { id: 'tv-audio', name: 'S·ª≠a TV & √¢m thanh', icon: 'üì∫', basePrice: '200,000 ‚Ç´' }
  ];

  // Danh s√°ch lo·∫°i thi·∫øt b·ªã theo d·ªãch v·ª•
  const applianceTypes = {
    electrical: ['·ªî c·∫Øm ƒëi·ªán', 'C√¥ng t·∫Øc ƒëi·ªán', 'ƒê√®n LED', 'Qu·∫°t tr·∫ßn', 'Kh√°c'],
    plumbing: ['V√≤i n∆∞·ªõc', 'B·ªìn r·ª≠a', 'Toilet', 'V√≤i sen', 'ƒê∆∞·ªùng ·ªëng', 'Kh√°c'],
    aircon: ['ƒêi·ªÅu h√≤a 1 chi·ªÅu', 'ƒêi·ªÅu h√≤a inverter', 'ƒêi·ªÅu h√≤a t·ªß ƒë·ª©ng', 'Kh√°c'],
    'washing-machine': ['M√°y gi·∫∑t c·ª≠a tr∆∞·ªõc', 'M√°y gi·∫∑t c·ª≠a tr√™n', 'M√°y gi·∫∑t s·∫•y', 'Kh√°c'],
    refrigerator: ['T·ªß l·∫°nh 1 c√°nh', 'T·ªß l·∫°nh 2 c√°nh', 'T·ªß l·∫°nh side by side', 'T·ªß ƒë√¥ng', 'Kh√°c'],
    'tv-audio': ['Smart TV', 'TV LED', 'D√†n √¢m thanh', 'Loa bluetooth', 'Kh√°c']
  };

  const timeSlots = [
    '08:00 - 10:00',
    '10:00 - 12:00', 
    '14:00 - 16:00',
    '16:00 - 18:00',
    '19:00 - 21:00'
  ];

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const handleImageUpload = (e) => {
    const files = Array.from(e.target.files);
    if (files.length + formData.images.length > 3) {
      alert('Ch·ªâ ƒë∆∞·ª£c t·∫£i l√™n t·ªëi ƒëa 3 h√¨nh ·∫£nh');
      return;
    }
    
    setFormData(prev => ({
      ...prev,
      images: [...prev.images, ...files]
    }));
  };

  const removeImage = (index) => {
    setFormData(prev => ({
      ...prev,
      images: prev.images.filter((_, i) => i !== index)
    }));
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.serviceType) newErrors.serviceType = 'Vui l√≤ng ch·ªçn lo·∫°i d·ªãch v·ª•';
    if (!formData.applianceType) newErrors.applianceType = 'Vui l√≤ng ch·ªçn lo·∫°i thi·∫øt b·ªã';
    if (!formData.description.trim()) newErrors.description = 'Vui l√≤ng m√¥ t·∫£ chi ti·∫øt s·ª± c·ªë';
    if (!formData.preferredDate) newErrors.preferredDate = 'Vui l√≤ng ch·ªçn ng√†y mong mu·ªën';
    if (!formData.preferredTime) newErrors.preferredTime = 'Vui l√≤ng ch·ªçn khung gi·ªù';
    if (!formData.address.trim()) newErrors.address = 'Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ';
    if (!formData.customerName.trim()) newErrors.customerName = 'Vui l√≤ng nh·∫≠p h·ªç t√™n';
    if (!formData.customerPhone.trim()) {
      newErrors.customerPhone = 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i';
    } else if (!/^[0-9]{10,11}$/.test(formData.customerPhone.replace(/\s/g, ''))) {
      newErrors.customerPhone = 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Generate booking ID (in real app, this would come from API)
      const bookingId = 'BK' + Date.now().toString().slice(-8);
      
      // Create booking data for tracking page
      const bookingData = {
        bookingId: bookingId,
        status: 'Pending',
        customerName: formData.customerName,
        customerPhone: formData.customerPhone,
        serviceType: serviceTypes.find(s => s.id === formData.serviceType)?.name || formData.serviceType,
        applianceType: formData.applianceType,
        description: formData.description,
        address: formData.address,
        preferredDate: formData.preferredDate,
        preferredTime: formData.preferredTime,
        urgencyLevel: formData.urgencyLevel,
        estimatedPrice: serviceTypes.find(s => s.id === formData.serviceType)?.basePrice || '200,000 ‚Ç´',
        actualPrice: null,
        technicianInfo: null,
        createdAt: new Date().toLocaleString('vi-VN'),
        updatedAt: new Date().toLocaleString('vi-VN'),
        statusHistory: [
          { 
            status: 'Pending', 
            timestamp: new Date().toLocaleString('vi-VN'), 
            note: 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o v√† ƒëang ch·ªù x·ª≠ l√Ω' 
          }
        ]
      };
      
      // Navigate to tracking page with booking data OR show success message
      if (onNavigateToTracking) {
        onNavigateToTracking(bookingData);
      } else {
        // Fallback: show success message and reset form
        alert(`ƒê·∫∑t l·ªãch th√†nh c√¥ng! M√£ ƒë∆°n h√†ng: ${bookingId}\nCh√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong v√≤ng 30 ph√∫t.`);
        
        // Reset form
        setFormData({
          serviceType: '',
          applianceType: '',
          description: '',
          preferredDate: '',
          preferredTime: '',
          address: '',
          customerName: '',
          customerPhone: '',
          urgencyLevel: 'normal',
          images: []
        });
      }
      
    } catch (error) {
      alert('C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Handle button click removed - no longer needed

  const selectedService = serviceTypes.find(s => s.id === formData.serviceType);

  return (
    <div className="page-content">
      <div className="page-header">
        <div className="breadcrumb">
          <span>Pages</span>
          <span className="breadcrumb-separator">/</span>
          <span className="breadcrumb-current">ƒê·∫∑t l·ªãch s·ª≠a ch·ªØa</span>
        </div>
        <h1 className="page-title">üìÖ ƒê·∫∑t l·ªãch s·ª≠a ch·ªØa</h1>
        <p className="page-subtitle">
          Ch·ªçn d·ªãch v·ª• v√† ƒë·∫∑t l·ªãch h·∫πn v·ªõi k·ªπ thu·∫≠t vi√™n chuy√™n nghi·ªáp
        </p>
      </div>

      <div className="booking-form-container">
        <form onSubmit={handleSubmit} className="booking-form">
          
          {/* Service Selection */}
          <div className="form-section">
            <h3 className="section-title">1. Ch·ªçn lo·∫°i d·ªãch v·ª•</h3>
            <div className="services-grid">
              {serviceTypes.map(service => (
                <div 
                  key={service.id}
                  className={`service-card ${formData.serviceType === service.id ? 'selected' : ''}`}
                  onClick={() => setFormData(prev => ({ 
                    ...prev, 
                    serviceType: service.id,
                    applianceType: '' // Reset appliance type when service changes
                  }))}
                >
                  <div className="service-icon">{service.icon}</div>
                  <h4>{service.name}</h4>
                  <div className="service-price">T·ª´ {service.basePrice}</div>
                </div>
              ))}
            </div>
            {errors.serviceType && <div className="error-message">{errors.serviceType}</div>}
          </div>

          {/* Appliance Type */}
          {formData.serviceType && (
            <div className="form-section">
              <h3 className="section-title">2. Lo·∫°i thi·∫øt b·ªã c·∫ßn s·ª≠a</h3>
              <select 
                name="applianceType"
                value={formData.applianceType}
                onChange={handleInputChange}
                className={`form-select ${errors.applianceType ? 'error' : ''}`}
              >
                <option value="">Ch·ªçn lo·∫°i thi·∫øt b·ªã</option>
                {applianceTypes[formData.serviceType]?.map(type => (
                  <option key={type} value={type}>{type}</option>
                ))}
              </select>
              {errors.applianceType && <div className="error-message">{errors.applianceType}</div>}
            </div>
          )}

          {/* Problem Description */}
          <div className="form-section">
            <h3 className="section-title">3. M√¥ t·∫£ s·ª± c·ªë</h3>
            <textarea
              name="description"
              value={formData.description}
              onChange={handleInputChange}
              placeholder="M√¥ t·∫£ chi ti·∫øt s·ª± c·ªë b·∫°n ƒëang g·∫∑p ph·∫£i..."
              className={`form-textarea ${errors.description ? 'error' : ''}`}
              rows="4"
            />
            {errors.description && <div className="error-message">{errors.description}</div>}
          </div>

          {/* Schedule */}
          <div className="form-section">
            <h3 className="section-title">4. Th·ªùi gian mong mu·ªën</h3>
            <div className="schedule-inputs">
              <div className="input-group">
                <label>Ng√†y mong mu·ªën</label>
                <input
                  type="date"
                  name="preferredDate"
                  value={formData.preferredDate}
                  onChange={handleInputChange}
                  min={new Date().toISOString().split('T')[0]}
                  className={`form-input ${errors.preferredDate ? 'error' : ''}`}
                />
                {errors.preferredDate && <div className="error-message">{errors.preferredDate}</div>}
              </div>
              
              <div className="input-group">
                <label>Khung gi·ªù</label>
                <select
                  name="preferredTime"
                  value={formData.preferredTime}
                  onChange={handleInputChange}
                  className={`form-select ${errors.preferredTime ? 'error' : ''}`}
                >
                  <option value="">Ch·ªçn khung gi·ªù</option>
                  {timeSlots.map(slot => (
                    <option key={slot} value={slot}>{slot}</option>
                  ))}
                </select>
                {errors.preferredTime && <div className="error-message">{errors.preferredTime}</div>}
              </div>
            </div>
          </div>

          {/* Customer Info */}
          <div className="form-section">
            <h3 className="section-title">5. Th√¥ng tin kh√°ch h√†ng</h3>
            <div className="customer-inputs">
              <div className="input-group">
                <label>H·ªç v√† t√™n</label>
                <input
                  type="text"
                  name="customerName"
                  value={formData.customerName}
                  onChange={handleInputChange}
                  placeholder="Nh·∫≠p h·ªç v√† t√™n"
                  className={`form-input ${errors.customerName ? 'error' : ''}`}
                  required
                />
                {errors.customerName && <div className="error-message">{errors.customerName}</div>}
              </div>
              
              <div className="input-group">
                <label>S·ªë ƒëi·ªán tho·∫°i</label>
                <input
                  type="tel"
                  name="customerPhone"
                  value={formData.customerPhone}
                  onChange={handleInputChange}
                  placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                  className={`form-input ${errors.customerPhone ? 'error' : ''}`}
                  required
                />
                {errors.customerPhone && <div className="error-message">{errors.customerPhone}</div>}
              </div>
            </div>
          </div>

          {/* Address */}
          <div className="form-section">
            <h3 className="section-title">6. ƒê·ªãa ch·ªâ s·ª≠a ch·ªØa</h3>
            <textarea
              name="address"
              value={formData.address}
              onChange={handleInputChange}
              placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ chi ti·∫øt (s·ªë nh√†, ƒë∆∞·ªùng, qu·∫≠n/huy·ªán, th√†nh ph·ªë)"
              className={`form-textarea ${errors.address ? 'error' : ''}`}
              rows="3"
            />
            {errors.address && <div className="error-message">{errors.address}</div>}
          </div>

          {/* Urgency Level */}
          <div className="form-section">
            <h3 className="section-title">7. M·ª©c ƒë·ªô kh·∫©n c·∫•p</h3>
            <div className="urgency-options">
              <label className="radio-option">
                <input
                  type="radio"
                  name="urgencyLevel"
                  value="normal"
                  checked={formData.urgencyLevel === 'normal'}
                  onChange={handleInputChange}
                />
                <span className="radio-label">
                  <span className="urgency-icon">üìÖ</span>
                  B√¨nh th∆∞·ªùng (trong 24h)
                </span>
              </label>
              
              <label className="radio-option">
                <input
                  type="radio"
                  name="urgencyLevel"
                  value="urgent"
                  checked={formData.urgencyLevel === 'urgent'}
                  onChange={handleInputChange}
                />
                <span className="radio-label">
                  <span className="urgency-icon">‚ö°</span>
                  Kh·∫©n c·∫•p (trong 4h) +50,000‚Ç´
                </span>
              </label>
            </div>
          </div>

          {/* Image Upload */}
          <div className="form-section">
            <h3 className="section-title">8. H√¨nh ·∫£nh s·ª± c·ªë (t√πy ch·ªçn)</h3>
            <div className="image-upload-section">
              <input
                type="file"
                accept="image/*"
                multiple
                onChange={handleImageUpload}
                className="file-input"
                id="image-upload"
              />
              <label htmlFor="image-upload" className="upload-label">
                üì∏ Ch·ªçn h√¨nh ·∫£nh (t·ªëi ƒëa 3 ·∫£nh)
              </label>
              
              {formData.images.length > 0 && (
                <div className="image-preview">
                  {formData.images.map((image, index) => (
                    <div key={index} className="image-item">
                      <img 
                        src={URL.createObjectURL(image)} 
                        alt={`Preview ${index + 1}`}
                        className="preview-image"
                      />
                      <button 
                        type="button"
                        onClick={() => removeImage(index)}
                        className="remove-image"
                      >
                        ‚úï
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          {/* Summary */}
          {selectedService && (
            <div className="booking-summary">
              <h3>üìã T√≥m t·∫Øt ƒë∆°n h√†ng</h3>
              <div className="summary-item">
                <span>D·ªãch v·ª•:</span>
                <span>{selectedService.name}</span>
              </div>
              {formData.applianceType && (
                <div className="summary-item">
                  <span>Thi·∫øt b·ªã:</span>
                  <span>{formData.applianceType}</span>
                </div>
              )}
              <div className="summary-item">
                <span>Ph√≠ c∆° b·∫£n:</span>
                <span>{selectedService.basePrice}</span>
              </div>
              {formData.urgencyLevel === 'urgent' && (
                <div className="summary-item urgent">
                  <span>Ph√≠ kh·∫©n c·∫•p:</span>
                  <span>+50,000‚Ç´</span>
                </div>
              )}
              <div className="summary-note">
                * Gi√° cu·ªëi c√πng s·∫Ω ƒë∆∞·ª£c x√°c nh·∫≠n b·ªüi k·ªπ thu·∫≠t vi√™n t·∫°i hi·ªán tr∆∞·ªùng
              </div>
            </div>
          )}

          {/* Submit Button */}
          <button 
            type="submit" 
            className="submit-btn"
            disabled={isSubmitting}
          >
            {isSubmitting ? (
              <>
                <span className="spinner"></span>
                ƒêang x·ª≠ l√Ω...
              </>
            ) : (
              'G·ª≠i y√™u c·∫ßu ƒë·∫∑t l·ªãch'
            )}
          </button>
        </form>
      </div>
    </div>
  );
};

export default RepairSchedule;
