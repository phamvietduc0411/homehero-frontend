import React, { useState } from 'react';
import '../../styles/User/ProductStore.css';

const ProductStore = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [cartItems, setCartItems] = useState([]);
  const [showCart, setShowCart] = useState(false);

  // D·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ Excel
  const products = [
    {
      id: 1,
      name: "Tua v√≠t ƒëa nƒÉng 10 ƒë·∫ßu",
      category: "D·ª•ng c·ª• c·∫ßm tay",
      description: "B·ªô tua v√≠t 10 ƒë·∫ßu thay ƒë·ªïi, ch·ªëng g·ªâ s√©t",
      price: 95000,
      brand: "Total Tools",
      stock: 12,
      unit: "B·ªô",
      image: "https://images.unsplash.com/photo-1581833971358-2c8b550f87b3?w=300&h=300&fit=crop"
    },
    {
      id: 2,
      name: "M√°y khoan c·∫ßm tay mini",
      category: "D·ª•ng c·ª• ƒëi·ªán",
      description: "M√°y khoan nh·ªè, d√πng s·ª≠a ƒë·ªì g·ªó, khoan t∆∞·ªùng nh·∫π",
      price: 450000,
      brand: "Bosch",
      stock: 4,
      unit: "C√°i",
      image: "https://images.unsplash.com/photo-1504148455328-c376907d081c?w=300&h=300&fit=crop"
    },
    {
      id: 3,
      name: "Keo d√°n ch·ªãu l·ª±c ƒëa nƒÉng",
      category: "V·∫≠t li·ªáu s·ª≠a ch·ªØa",
      description: "Keo epoxy 2 th√†nh ph·∫ßn, d√°n kim lo·∫°i ‚Äì g·ªó ‚Äì nh·ª±a",
      price: 65000,
      brand: "Selleys",
      stock: 10,
      unit: "Tu√Ωp",
      image: "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=300&h=300&fit=crop"
    },
    {
      id: 4,
      name: "BƒÉng keo ƒëi·ªán ch·ªëng th·∫•m",
      category: "ƒêi·ªán & d√¢y d·∫´n",
      description: "D√πng qu·∫•n d√¢y ƒëi·ªán, c√°ch nhi·ªát, ch·ªëng n∆∞·ªõc",
      price: 15000,
      brand: "3M",
      stock: 200,
      unit: "Cu·ªôn",
      image: "https://images.unsplash.com/photo-1558618048-fcd25c85cd64?w=300&h=300&fit=crop"
    },
    {
      id: 5,
      name: "B·ªô v√≤i n∆∞·ªõc tƒÉng √°p",
      category: "Ph·ª• ki·ªán nh√† t·∫Øm",
      description: "B·ªô v√≤i sen tƒÉng √°p l·ª±c, d·ªÖ l·∫Øp ƒë·∫∑t",
      price: 135000,
      brand: "Inax",
      stock: 20,
      unit: "B·ªô",
      image: "https://images.unsplash.com/photo-1584622650111-993a426fbf0a?w=300&h=300&fit=crop"
    },
    {
      id: 6,
      name: "K√¨m c·∫Øt ƒëa nƒÉng",
      category: "D·ª•ng c·ª• c·∫ßm tay",
      description: "K√¨m c·∫Øt d√¢y ƒëi·ªán, th√©p, c√≥ tay c·∫ßm ch·ªëng tr∆∞·ª£t",
      price: 75000,
      brand: "Stanley",
      stock: 50,
      unit: "C√°i",
      image: "https://images.unsplash.com/photo-1609205773820-6f30f07b3b28?w=300&h=300&fit=crop"
    },
    {
      id: 7,
      name: "B√≥ng ƒë√®n LED 12W ti·∫øt ki·ªám ƒëi·ªán",
      category: "ƒêi·ªán & chi·∫øu s√°ng",
      description: "B√≥ng ƒë√®n LED tr√≤n, √°nh s√°ng tr·∫Øng, tu·ªïi th·ªç cao",
      price: 25000,
      brand: "ƒêi·ªán Quang",
      stock: 30,
      unit: "C√°i",
      image: "https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?w=300&h=300&fit=crop"
    },
    {
      id: 8,
      name: "Th∆∞·ªõc d√¢y th√©p 5m",
      category: "D·ª•ng c·ª• ƒëo ƒë·∫°c",
      description: "Th∆∞·ªõc ƒëo k√©o cu·ªôn, v·ªè nh·ª±a ABS b·ªÅn ch·∫Øc",
      price: 32000,
      brand: "Tolsen",
      stock: 10,
      unit: "C√°i",
      image: "https://images.unsplash.com/photo-1581833971358-2c8b550f87b3?w=300&h=300&fit=crop"
    },
    {
      id: 9,
      name: "B·ªô ·ªëc v√≠t ƒëa k√≠ch c·ª°",
      category: "Linh ki·ªán ph·ª• tr·ª£",
      description: "H·ªôp ·ªëc v√≠t 200 chi·∫øc nhi·ªÅu lo·∫°i, d√πng cho g·ªó & th√©p",
      price: 55000,
      brand: "OEM",
      stock: 30,
      unit: "H·ªôp",
      image: "https://images.unsplash.com/photo-1572635196243-4dd75fbdbd7f?w=300&h=300&fit=crop"
    },
    {
      id: 10,
      name: "B∆°m tay th√¥ng ngh·∫πt b·ªìn r·ª≠a",
      category: "D·ª•ng c·ª• v·ªá sinh",
      description: "D·ª•ng c·ª• h√∫t kh√≠ t·∫°o √°p l·ª±c th√¥ng ngh·∫πt nhanh",
      price: 110000,
      brand: "Nh·∫≠t Quang",
      stock: 15,
      unit: "C√°i",
      image: "https://images.unsplash.com/photo-1558618047-3c8b850fcdc2?w=300&h=300&fit=crop"
    }
  ];

  // L·∫•y danh s√°ch categories duy nh·∫•t
  const categories = ['all', ...new Set(products.map(product => product.category))];

  // L·ªçc s·∫£n ph·∫©m
  const filteredProducts = products.filter(product => {
    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         product.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = selectedCategory === 'all' || product.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  // Format gi√° ti·ªÅn
  const formatPrice = (price) => {
    return new Intl.NumberFormat('vi-VN').format(price) + ' ‚Ç´';
  };

  // Th√™m v√†o gi·ªè h√†ng
  const addToCart = (product, quantity = 1) => {
    const existingItem = cartItems.find(item => item.id === product.id);
    if (existingItem) {
      setCartItems(cartItems.map(item =>
        item.id === product.id
          ? { ...item, quantity: item.quantity + quantity }
          : item
      ));
    } else {
      setCartItems([...cartItems, { ...product, quantity }]);
    }
  };

  // X√≥a kh·ªèi gi·ªè h√†ng
  const removeFromCart = (productId) => {
    setCartItems(cartItems.filter(item => item.id !== productId));
  };

  // T√≠nh t·ªïng ti·ªÅn gi·ªè h√†ng
  const getTotalPrice = () => {
    return cartItems.reduce((total, item) => total + (item.price * item.quantity), 0);
  };

  return (
    <div className="product-store">
      {/* Page Header gi·ªëng c√°c trang kh√°c */}
      <div className="page-header">
        <div className="breadcrumb">
          <span>Pages</span>
          <span className="breadcrumb-separator">/</span>
          <span className="breadcrumb-current">ƒê·∫∑t mua s·∫£n ph·∫©m</span>
        </div>
        <h1 className="page-title">üõçÔ∏è C·ª≠a h√†ng d·ª•ng c·ª• s·ª≠a ch·ªØa</h1>
        <p className="page-subtitle">
          T√¨m mua c√°c s·∫£n ph·∫©m, d·ª•ng c·ª• ch·∫•t l∆∞·ª£ng cao cho vi·ªác s·ª≠a ch·ªØa t·∫°i nh√†
        </p>
      </div>

      {/* Main Content */}
      <div className="store-content">
        {/* Store Header with Cart */}
        <div className="store-header">
          <div className="cart-summary" onClick={() => setShowCart(!showCart)}>
            <i className="fas fa-shopping-cart"></i>
            <span className="cart-count">{cartItems.length}</span>
            <span className="cart-total">{formatPrice(getTotalPrice())}</span>
          </div>
        </div>

      {/* Filters */}
      <div className="filters-section">
        <div className="search-bar">
          <i className="fas fa-search"></i>
          <input
            type="text"
            placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
        
        <div className="category-filters">
          {categories.map(category => (
            <button
              key={category}
              className={`category-btn ${selectedCategory === category ? 'active' : ''}`}
              onClick={() => setSelectedCategory(category)}
            >
              {category === 'all' ? 'üîß T·∫•t c·∫£' : `üì¶ ${category}`}
            </button>
          ))}
        </div>
      </div>

      {/* Products Grid */}
      <div className="products-grid">
        {filteredProducts.map(product => (
          <div key={product.id} className="product-card">
            <div className="product-image">
              <img src={product.image} alt={product.name} />
              <div className="product-badge">
                {product.stock < 10 ? 'S·∫Øp h·∫øt' : 'C√≤n h√†ng'}
              </div>
            </div>
            
            <div className="product-info">
              <h3 className="product-name">{product.name}</h3>
              <p className="product-description">{product.description}</p>
              
              <div className="product-details">
                <span className="brand">üè∑Ô∏è {product.brand}</span>
                <span className="stock">üì¶ {product.stock} {product.unit}</span>
              </div>
              
              <div className="product-footer">
                <div className="price-section">
                  <span className="price">{formatPrice(product.price)}</span>
                  <span className="unit">/{product.unit}</span>
                </div>
                
                <div className="quantity-controls">
                  <button 
                    className="add-to-cart-btn"
                    onClick={() => addToCart(product)}
                    disabled={product.stock === 0}
                  >
                    <i className="fas fa-cart-plus"></i>
                    Th√™m v√†o gi·ªè
                  </button>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Cart Sidebar */}
      {showCart && (
        <div className="cart-sidebar">
          <div className="cart-header">
            <h3>üõí Gi·ªè h√†ng c·ªßa b·∫°n</h3>
            <button onClick={() => setShowCart(false)}>
              <i className="fas fa-times"></i>
            </button>
          </div>
          
          <div className="cart-items">
            {cartItems.length === 0 ? (
              <p className="empty-cart">Gi·ªè h√†ng tr·ªëng</p>
            ) : (
              cartItems.map(item => (
                <div key={item.id} className="cart-item">
                  <img src={item.image} alt={item.name} />
                  <div className="item-details">
                    <h4>{item.name}</h4>
                    <p>{formatPrice(item.price)} x {item.quantity}</p>
                  </div>
                  <button 
                    className="remove-btn"
                    onClick={() => removeFromCart(item.id)}
                  >
                    <i className="fas fa-trash"></i>
                  </button>
                </div>
              ))
            )}
          </div>
          
          {cartItems.length > 0 && (
            <div className="cart-footer">
              <div className="total-price">
                <strong>T·ªïng: {formatPrice(getTotalPrice())}</strong>
              </div>
              <button className="checkout-btn">
                <i className="fas fa-credit-card"></i>
                ƒê·∫∑t h√†ng ngay
              </button>
            </div>
          )}
        </div>
      )}

        {/* Results count */}
        <div className="results-info">
          Hi·ªÉn th·ªã {filteredProducts.length} s·∫£n ph·∫©m
          {searchTerm && ` cho "${searchTerm}"`}
          {selectedCategory !== 'all' && ` trong danh m·ª•c "${selectedCategory}"`}
        </div>
      </div>
    </div>
  );
};

export default ProductStore;