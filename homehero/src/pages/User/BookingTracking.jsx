import React, { useState, useEffect } from 'react';
import '../../styles/User/BookingTracking.css';

const BookingTracking = ({ initialBookingData, onNavigateToPayment, onBackToForm }) => {
  // Initialize with passed data or sample data
  const [bookingData, setBookingData] = useState(initialBookingData || {
    bookingId: 'BK20250623001',
    status: 'Confirmed',
    customerName: 'Nguy·ªÖn VƒÉn A',
    customerPhone: '0912345678',
    serviceType: 'S·ª≠a ch·ªØa ƒëi·ªÅu h√≤a',
    applianceType: 'ƒêi·ªÅu h√≤a inverter',
    description: 'ƒêi·ªÅu h√≤a kh√¥ng l·∫°nh, ti·∫øng ·ªìn khi ho·∫°t ƒë·ªông',
    address: '123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM',
    preferredDate: '2025-06-25',
    preferredTime: '14:00 - 16:00',
    urgencyLevel: 'normal',
    estimatedPrice: '350,000',
    actualPrice: null,
    technicianInfo: {
      name: 'Tr·∫ßn VƒÉn B√¨nh',
      phone: '0987654321',
      rating: 4.8,
      experience: '5 nƒÉm kinh nghi·ªám',
      avatar: 'üë®‚Äçüîß'
    },
    createdAt: '2025-06-23 14:30',
    updatedAt: '2025-06-23 15:15',
    statusHistory: [
      { status: 'Pending', timestamp: '2025-06-23 14:30', note: 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o' },
      { status: 'Confirmed', timestamp: '2025-06-23 15:15', note: 'ƒê√£ ph√¢n c√¥ng th·ª£ v√† x√°c nh·∫≠n l·ªãch h·∫πn' }
    ]
  });

  // Status configuration
  const statusConfig = {
    'Pending': {
      label: 'Ch·ªù x·ª≠ l√Ω',
      icon: '‚è≥',
      color: '#f59e0b',
      description: 'ƒê∆°n h√†ng ƒëang ch·ªù ƒë∆∞·ª£c x·ª≠ l√Ω'
    },
    'Confirmed': {
      label: 'ƒê√£ x√°c nh·∫≠n',
      icon: '‚úÖ',
      color: '#10b981',
      description: 'ƒê√£ ph√¢n c√¥ng th·ª£ v√† x√°c nh·∫≠n l·ªãch h·∫πn'
    },
    'InProgress': {
      label: 'ƒêang s·ª≠a ch·ªØa',
      icon: 'üîß',
      color: '#3b82f6',
      description: 'Th·ª£ ƒëang ti·∫øn h√†nh s·ª≠a ch·ªØa'
    },
    'Completed': {
      label: 'Ho√†n th√†nh',
      icon: 'üéâ',
      color: '#059669',
      description: 'D·ªãch v·ª• ƒë√£ ho√†n th√†nh'
    },
    'Cancelled': {
      label: 'ƒê√£ h·ªßy',
      icon: '‚ùå',
      color: '#ef4444',
      description: 'ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy'
    }
  };

  const statusOrder = ['Pending', 'Confirmed', 'InProgress', 'Completed'];
  const currentStatusIndex = statusOrder.indexOf(bookingData.status);

  // üéØ FIX: Handle auto navigation to payment when completed
  useEffect(() => {
    if (bookingData.status === 'Completed' && onNavigateToPayment) {
      // Add actual price when completed
      const completedData = {
        ...bookingData,
        actualPrice: '450,000'
      };
      
      // Auto navigate to payment after 3 seconds
      const timer = setTimeout(() => {
        onNavigateToPayment(completedData);
      }, 3000);
      
      return () => clearTimeout(timer);
    }
  }, [bookingData.status, onNavigateToPayment]);

  // Simulate real-time updates
  useEffect(() => {
    const interval = setInterval(() => {
      // In real app, this would be WebSocket or polling API
      // For demo, we'll simulate status changes
      if (Math.random() > 0.97) { // 3% chance every second
        const nextStatusIndex = Math.min(currentStatusIndex + 1, statusOrder.length - 1);
        if (nextStatusIndex > currentStatusIndex) {
          const newStatus = statusOrder[nextStatusIndex];
          setBookingData(prev => ({
            ...prev,
            status: newStatus,
            updatedAt: new Date().toLocaleString('vi-VN'),
            statusHistory: [
              ...prev.statusHistory,
              {
                status: newStatus,
                timestamp: new Date().toLocaleString('vi-VN'),
                note: statusConfig[newStatus].description
              }
            ]
          }));
        }
      }
    }, 1000);

    return () => clearInterval(interval);
  }, [currentStatusIndex]);

  // üéØ ADD: Manual function to simulate progress (for testing)
  const handleSimulateProgress = () => {
    const nextStatusIndex = Math.min(currentStatusIndex + 1, statusOrder.length - 1);
    if (nextStatusIndex > currentStatusIndex) {
      const newStatus = statusOrder[nextStatusIndex];
      setBookingData(prev => ({
        ...prev,
        status: newStatus,
        updatedAt: new Date().toLocaleString('vi-VN'),
        statusHistory: [
          ...prev.statusHistory,
          {
            status: newStatus,
            timestamp: new Date().toLocaleString('vi-VN'),
            note: statusConfig[newStatus].description
          }
        ]
      }));
    }
  };

  // üéØ ADD: Manual navigate to payment (for testing)
  const handleManualPayment = () => {
    if (onNavigateToPayment) {
      onNavigateToPayment({
        ...bookingData,
        actualPrice: '450,000'
      });
    }
  };

  const handleCancelBooking = () => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy ƒë∆°n h√†ng n√†y?')) {
      setBookingData(prev => ({
        ...prev,
        status: 'Cancelled',
        updatedAt: new Date().toLocaleString('vi-VN'),
        statusHistory: [
          ...prev.statusHistory,
          {
            status: 'Cancelled',
            timestamp: new Date().toLocaleString('vi-VN'),
            note: 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy b·ªüi kh√°ch h√†ng'
          }
        ]
      }));
    }
  };

  const handleContactTechnician = () => {
    if (bookingData.technicianInfo) {
      window.open(`tel:${bookingData.technicianInfo.phone}`);
    }
  };

  const getProgressPercentage = () => {
    if (bookingData.status === 'Cancelled') return 0;
    return ((currentStatusIndex + 1) / statusOrder.length) * 100;
  };

  return (
    <div className="page-content">
      <div className="page-header">
        <div className="breadcrumb">
          <span>Pages</span>
          <span className="breadcrumb-separator">/</span>
          <span className="breadcrumb-current">Theo d√µi ƒë∆°n h√†ng</span>
        </div>
        <h1 className="page-title">üì± Theo d√µi ƒë∆°n h√†ng</h1>
        <p className="page-subtitle">
          M√£ ƒë∆°n h√†ng: <strong>{bookingData.bookingId}</strong>
        </p>
      </div>

      <div className="tracking-container">
        
        {/* Status Progress */}
        <div className="status-section">
          <div className="status-header">
            <div className="current-status">
              <span className="status-icon" style={{ color: statusConfig[bookingData.status].color }}>
                {statusConfig[bookingData.status].icon}
              </span>
              <div className="status-info">
                <h3>{statusConfig[bookingData.status].label}</h3>
                <p>{statusConfig[bookingData.status].description}</p>
                <small>C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: {bookingData.updatedAt}</small>
                
                {/* üéØ ADD: Show countdown when completed */}
                {bookingData.status === 'Completed' && (
                  <div className="completion-notice">
                    <p style={{ color: '#059669', fontWeight: 'bold', marginTop: '10px' }}>
                      üéâ D·ªãch v·ª• ho√†n th√†nh! ƒêang chuy·ªÉn ƒë·∫øn trang thanh to√°n...
                    </p>
                  </div>
                )}
              </div>
            </div>
            
            {bookingData.status !== 'Cancelled' && bookingData.status !== 'Completed' && (
              <button onClick={handleCancelBooking} className="cancel-btn">
                H·ªßy ƒë∆°n h√†ng
              </button>
            )}
          </div>

          {/* Progress Bar */}
          <div className="progress-container">
            <div className="progress-bar">
              <div 
                className="progress-fill"
                style={{ 
                  width: `${getProgressPercentage()}%`,
                  backgroundColor: bookingData.status === 'Cancelled' ? '#ef4444' : '#10b981'
                }}
              ></div>
            </div>
            
            <div className="progress-steps">
              {statusOrder.map((status, index) => (
                <div 
                  key={status}
                  className={`step ${index <= currentStatusIndex ? 'completed' : ''} ${
                    bookingData.status === 'Cancelled' ? 'cancelled' : ''
                  }`}
                >
                  <div className="step-circle">
                    <span>{statusConfig[status].icon}</span>
                  </div>
                  <div className="step-label">{statusConfig[status].label}</div>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Booking Details */}
        <div className="details-section">
          <h3>üìã Chi ti·∫øt ƒë∆°n h√†ng</h3>
          <div className="details-grid">
            <div className="detail-item">
              <span className="label">D·ªãch v·ª•:</span>
              <span className="value">{bookingData.serviceType}</span>
            </div>
            <div className="detail-item">
              <span className="label">Thi·∫øt b·ªã:</span>
              <span className="value">{bookingData.applianceType}</span>
            </div>
            <div className="detail-item">
              <span className="label">Th·ªùi gian:</span>
              <span className="value">{bookingData.preferredDate} ({bookingData.preferredTime})</span>
            </div>
            <div className="detail-item">
              <span className="label">ƒê·ªãa ch·ªâ:</span>
              <span className="value">{bookingData.address}</span>
            </div>
            <div className="detail-item">
              <span className="label">M√¥ t·∫£ s·ª± c·ªë:</span>
              <span className="value">{bookingData.description}</span>
            </div>
            <div className="detail-item">
              <span className="label">Gi√° ∆∞·ªõc t√≠nh:</span>
              <span className="value price">{bookingData.estimatedPrice} ‚Ç´</span>
            </div>
            {bookingData.actualPrice && (
              <div className="detail-item">
                <span className="label">Gi√° th·ª±c t·∫ø:</span>
                <span className="value price actual">{bookingData.actualPrice} ‚Ç´</span>
              </div>
            )}
          </div>
        </div>

        {/* Technician Info */}
        {bookingData.technicianInfo && bookingData.status !== 'Pending' && (
          <div className="technician-section">
            <h3>üë®‚Äçüîß Th√¥ng tin th·ª£ s·ª≠a ch·ªØa</h3>
            <div className="technician-card">
              <div className="technician-avatar">
                {bookingData.technicianInfo.avatar}
              </div>
              <div className="technician-info">
                <h4>{bookingData.technicianInfo.name}</h4>
                <div className="technician-details">
                  <span className="rating">‚≠ê {bookingData.technicianInfo.rating}</span>
                  <span className="experience">{bookingData.technicianInfo.experience}</span>
                </div>
                <p className="phone">üìû {bookingData.technicianInfo.phone}</p>
              </div>
              <button onClick={handleContactTechnician} className="contact-btn">
                Li√™n h·ªá th·ª£
              </button>
            </div>
          </div>
        )}

        {/* Status History */}
        <div className="history-section">
          <h3>üìú L·ªãch s·ª≠ tr·∫°ng th√°i</h3>
          <div className="history-timeline">
            {bookingData.statusHistory.slice().reverse().map((item, index) => (
              <div key={index} className="timeline-item">
                <div className="timeline-marker">
                  <span>{statusConfig[item.status].icon}</span>
                </div>
                <div className="timeline-content">
                  <div className="timeline-status">{statusConfig[item.status].label}</div>
                  <div className="timeline-note">{item.note}</div>
                  <div className="timeline-time">{item.timestamp}</div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Actions */}
        <div className="actions-section">
          {/* üéØ ADD: Test buttons for development */}
          {bookingData.status !== 'Completed' && bookingData.status !== 'Cancelled' && (
            <button onClick={handleSimulateProgress} className="action-btn primary">
              üöÄ M√¥ ph·ªèng ti·∫øn tr√¨nh ti·∫øp theo
            </button>
          )}
          
          {bookingData.status === 'Completed' && (
            <>
              <button onClick={handleManualPayment} className="action-btn primary">
                üí≥ ƒêi ƒë·∫øn thanh to√°n
              </button>
              <button className="action-btn secondary">‚≠ê ƒê√°nh gi√° d·ªãch v·ª•</button>
              <button className="action-btn secondary">üîÑ ƒê·∫∑t l·∫°i d·ªãch v·ª•</button>
            </>
          )}
          
          {bookingData.status === 'InProgress' && (
            <>
              <button onClick={handleContactTechnician} className="action-btn primary">
                üìû Li√™n h·ªá th·ª£
              </button>
              <button className="action-btn secondary">‚ùì B√°o c√°o v·∫•n ƒë·ªÅ</button>
            </>
          )}
          
          {onBackToForm && (
            <button onClick={onBackToForm} className="action-btn secondary">
              üè† V·ªÅ trang ƒë·∫∑t l·ªãch
            </button>
          )}
        </div>
      </div>
    </div>
  );
};

export default BookingTracking;