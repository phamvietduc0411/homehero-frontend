import React, { useState, useEffect } from 'react';
import UserSidebarMenu from '../../components/User/UserSidebarMenu';
import '../../styles/User/DashboardPage.css'; // General dashboard styles
import '../../styles/User/UserSidebarMenu.css'; // Sidebar specific styles
import '../../styles/User/Payment.css'; // Specific styles for the Payment page
import QR from '../../assets/img/download.png';
import VietQROfficial from './PaymentQRSection';


const Payment = ({ userData, onBackToTracking }) => {
  const [unpaidBookings, setUnpaidBookings] = useState([]);
  const [selectedBooking, setSelectedBooking] = useState(null);
  const [loading, setLoading] = useState(true);
  const [paymentMethod, setPaymentMethod] = useState('');
  const [paymentStatus, setPaymentStatus] = useState('pending');
  const [cashConfirmed, setCashConfirmed] = useState(false);
  const [transferConfirmed, setTransferConfirmed] = useState(false);

  // Bank account info for transfer
  const bankInfo = {
    bankName: 'Ng√¢n h√†ng BIDV',
    accountNumber: '12345678901',
    accountName: 'CONG TY HOMEHERO',
    qrCode: QR
  };

  useEffect(() => {
    const fetchUnpaidBookings = async () => {
      if (!userData?.id) {
        setLoading(false);
        return;
      }

      try {
        const response = await fetch(
          `https://homeheroapi-c6hngtg0ezcyeggg.southeastasia-01.azurewebsites.net/api/Booking/user/${userData.id}/unpaid`
        );
        const result = await response.json();

        if (result.isSuccess && result.data.unpaidBookings.length > 0) {
          setUnpaidBookings(result.data.unpaidBookings);
          setSelectedBooking(result.data.unpaidBookings[0]); // Auto select first booking
        }
      } catch (error) {
        console.error('Error fetching unpaid bookings:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchUnpaidBookings();
  }, [userData?.id]);

  const handlePaymentMethodSelect = (method) => {
    setPaymentMethod(method);
    setCashConfirmed(false);
    setTransferConfirmed(false);
    setPaymentStatus('pending');
  };

  const handleCashPayment = async () => {
    if (window.confirm('X√°c nh·∫≠n b·∫°n ƒë√£ thanh to√°n ti·ªÅn m·∫∑t cho th·ª£ s·ª≠a ch·ªØa?')) {
      setCashConfirmed(true);
      setPaymentStatus('processing');
      
      try {
        // ‚úÖ THAY ƒê·ªîI: S·ª≠ d·ª•ng API m·ªõi v·ªõi status "Unpaid"
        const paymentData = {
          bookingId: selectedBooking.bookingId,
          amount: selectedBooking.totalPrice,
          paymentMethod: 'Cash',
          transactionCode: null // Cash kh√¥ng c√≥ transaction code
        };

        const response = await fetch(
          'https://homeheroapi-c6hngtg0ezcyeggg.southeastasia-01.azurewebsites.net/api/Payment/create',
          {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(paymentData)
          }
        );

        const result = await response.json();

        if (result.isSuccess) {
          setPaymentStatus('completed');
          // ‚úÖ THAY ƒê·ªîI: Message ph√π h·ª£p v·ªõi workflow m·ªõi
          alert('X√°c nh·∫≠n thanh to√°n th√†nh c√¥ng! Th·ª£ s·∫Ω thu ti·ªÅn v√† chuy·ªÉn hoa h·ªìng v·ªÅ cho HomeHero. B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c x√°c nh·∫≠n qua email khi ho√†n t·∫•t.');
          
          // Remove paid booking from list
          const updatedBookings = unpaidBookings.filter(b => b.bookingId !== selectedBooking.bookingId);
          setUnpaidBookings(updatedBookings);
          setSelectedBooking(updatedBookings.length > 0 ? updatedBookings[0] : null);
          
          // Reset payment method selection
          setPaymentMethod('');
        } else {
          throw new Error(result.message || 'Payment creation failed');
        }
      } catch (error) {
        console.error('Error creating payment:', error);
        alert(`C√≥ l·ªói x·∫£y ra khi t·∫°o thanh to√°n: ${error.message}. Vui l√≤ng th·ª≠ l·∫°i.`);
        setPaymentStatus('pending');
        setCashConfirmed(false);
      }
    }
  };

  const handleTransferPayment = async () => {
    if (window.confirm('X√°c nh·∫≠n b·∫°n ƒë√£ chuy·ªÉn kho·∫£n theo th√¥ng tin tr√™n?')) {
      setTransferConfirmed(true);
      setPaymentStatus('processing');
      
      try {
        // ‚úÖ THAY ƒê·ªîI: S·ª≠ d·ª•ng API m·ªõi v·ªõi status "Unpaid"
        const paymentData = {
          bookingId: selectedBooking.bookingId,
          amount: selectedBooking.totalPrice,
          paymentMethod: 'Transfer', // ‚úÖ THAY ƒê·ªîI: D√πng 'Transfer' thay v√¨ 'Momo'
          transactionCode: `TRANSFER${Date.now()}` // Generate transaction code
        };

        const response = await fetch(
          'https://homeheroapi-c6hngtg0ezcyeggg.southeastasia-01.azurewebsites.net/api/Payment/create',
          {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(paymentData)
          }
        );

        const result = await response.json();

        if (result.isSuccess) {
          setPaymentStatus('completed');
          // ‚úÖ THAY ƒê·ªîI: Message ph√π h·ª£p v·ªõi workflow m·ªõi
          alert('X√°c nh·∫≠n chuy·ªÉn kho·∫£n th√†nh c√¥ng! HomeHero s·∫Ω x√°c minh giao d·ªãch v√† chuy·ªÉn ti·ªÅn cho th·ª£. B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c x√°c nh·∫≠n qua email khi ho√†n t·∫•t.');
          
          // Remove paid booking from list
          const updatedBookings = unpaidBookings.filter(b => b.bookingId !== selectedBooking.bookingId);
          setUnpaidBookings(updatedBookings);
          setSelectedBooking(updatedBookings.length > 0 ? updatedBookings[0] : null);
          
          // Reset payment method selection
          setPaymentMethod('');
        } else {
          throw new Error(result.message || 'Payment creation failed');
        }
      } catch (error) {
        console.error('Error creating payment:', error);
        alert(`C√≥ l·ªói x·∫£y ra khi t·∫°o thanh to√°n: ${error.message}. Vui l√≤ng th·ª≠ l·∫°i.`);
        setPaymentStatus('pending');
        setTransferConfirmed(false);
      }
    }
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text).then(() => {
      alert('ƒê√£ sao ch√©p v√†o clipboard!');
    }).catch(() => {
      alert('Kh√¥ng th·ªÉ sao ch√©p. Vui l√≤ng copy th·ªß c√¥ng.');
    });
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  };

  if (loading) {
    return (
      <div className="page-content">
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>ƒêang t·∫£i th√¥ng tin thanh to√°n...</p>
        </div>
      </div>
    );
  }

  if (unpaidBookings.length === 0) {
    return (
      <div className="page-content">
        <div className="page-header">
          <div className="breadcrumb">
            <span>Pages</span>
            <span className="breadcrumb-separator">/</span>
            <span className="breadcrumb-current">Thanh to√°n</span>
          </div>
          <h1 className="page-title">üí≥ Thanh to√°n d·ªãch v·ª•</h1>
        </div>
        <div className="payment-container">
          <div className="no-payment-container">
            <div className="no-payment-icon">‚úÖ</div>
            <h3>Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o c·∫ßn thanh to√°n</h3>
            <p>T·∫•t c·∫£ ƒë∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c thanh to√°n ho·∫∑c ch∆∞a ho√†n th√†nh.</p>
            {onBackToTracking && (
              <button onClick={onBackToTracking} className="action-btn primary">
                üè† V·ªÅ trang ch·ªß
              </button>
            )}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="page-content">
      <div className="page-header">
        <div className="breadcrumb">
          <span>Pages</span>
          <span className="breadcrumb-separator">/</span>
          <span className="breadcrumb-current">Thanh to√°n</span>
        </div>
        <h1 className="page-title">üí≥ Thanh to√°n d·ªãch v·ª•</h1>
        <p className="page-subtitle">
          B·∫°n c√≥ <strong>{unpaidBookings.length}</strong> ƒë∆°n h√†ng c·∫ßn thanh to√°n
        </p>
      </div>

      <div className="payment-container">
        
        {/* Booking Selection (if multiple) */}
        {unpaidBookings.length > 1 && (
          <div className="booking-selection-section">
            <h3>üìã Ch·ªçn ƒë∆°n h√†ng c·∫ßn thanh to√°n</h3>
            <div className="booking-list">
              {unpaidBookings.map(booking => (
                <div 
                  key={booking.bookingId}
                  className={`booking-item ${selectedBooking?.bookingId === booking.bookingId ? 'selected' : ''}`}
                  onClick={() => setSelectedBooking(booking)}
                >
                  <div className="booking-info">
                    <h4>{booking.bookingCode}</h4>
                    <p>{booking.serviceName}</p>
                    <p>Th·ª£: {booking.technicianName}</p>
                    <small>Ho√†n th√†nh: {new Date(booking.completedAt).toLocaleString('vi-VN')}</small>
                  </div>
                  <div className="booking-price">
                    {booking.formattedPrice}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Selected Booking Payment Details */}
        {selectedBooking && (
          <>
            {/* Service Summary */}
            <div className="summary-section">
              <h3>üìã T√≥m t·∫Øt d·ªãch v·ª• - {selectedBooking.bookingCode}</h3>
              <div className="service-info">
                <div className="service-header">
                  <div className="service-title">{selectedBooking.serviceName}</div>
                  <div className="service-meta">
                    <span>Th·ª£: {selectedBooking.technicianName}</span>
                    <span>Ho√†n th√†nh: {new Date(selectedBooking.completedAt).toLocaleString('vi-VN')}</span>
                  </div>
                </div>
                
                <div className="service-details">
                  <div className="summary-calculations">
                    <div className="calc-row total">
                      <span>T·ªïng c·ªông:</span>
                      <span>{selectedBooking.formattedPrice}</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Payment Method Selection */}
            <div className="payment-method-section">
              <h3>üí∞ Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n</h3>
              <div className="payment-methods">
                
                {/* ==================== CASH PAYMENT - TEMPORARILY DISABLED ==================== */}
    {/* 
    <div 
      className={`payment-option ${paymentMethod === 'cash' ? 'selected' : ''}`}
      onClick={() => handlePaymentMethodSelect('cash')}
    >
      <div className="payment-header">
        <div className="payment-icon">üíµ</div>
        <div className="payment-info">
          <h4>Thanh to√°n ti·ªÅn m·∫∑t</h4>
          <p>Thanh to√°n tr·ª±c ti·∫øp cho th·ª£ s·ª≠a ch·ªØa</p>
        </div>
        <div className="payment-radio">
          <input 
            type="radio" 
            name="paymentMethod"
            value="cash"
            checked={paymentMethod === 'cash'}
            onChange={() => {}}
          />
        </div>
      </div>
      {paymentMethod === 'cash' && (
        <div className="payment-details">
          <div className="cash-instructions">
            <h5>H∆∞·ªõng d·∫´n thanh to√°n ti·ªÅn m·∫∑t:</h5>
            <ul>
              <li>Thanh to√°n tr·ª±c ti·∫øp cho th·ª£ s·ª≠a ch·ªØa t·∫°i hi·ªán tr∆∞·ªùng</li>
              <li>S·ªë ti·ªÅn: <strong>{selectedBooking.formattedPrice}</strong></li>
              <li>‚úÖ <strong>X√°c nh·∫≠n ƒë·ªÉ t·∫°o giao d·ªãch trong h·ªá th·ªëng</strong></li>
              <li>Th·ª£ s·∫Ω thu ti·ªÅn v√† chuy·ªÉn hoa h·ªìng v·ªÅ cho HomeHero</li>
              <li>B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c email x√°c nh·∫≠n khi ho√†n t·∫•t</li>
            </ul>
            
            {!cashConfirmed && paymentStatus === 'pending' && (
              <button 
                onClick={handleCashPayment}
                className="confirm-payment-btn"
              >
                ‚úÖ X√°c nh·∫≠n thanh to√°n ti·ªÅn m·∫∑t
              </button>
            )}
            
            {paymentStatus === 'processing' && (
              <div className="processing-status">
                <div className="spinner"></div>
                <span>ƒêang t·∫°o giao d·ªãch...</span>
              </div>
            )}
            
            {paymentStatus === 'completed' && (
              <div className="success-status">
                <span className="success-icon">üéâ</span>
                <span>Giao d·ªãch ƒë√£ ƒë∆∞·ª£c t·∫°o! Ch·ªù x√°c nh·∫≠n t·ª´ th·ª£.</span>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
    */}
    {/* ==================== END CASH PAYMENT ==================== */}

                {/* Bank Transfer */}
                <div 
                  className={`payment-option ${paymentMethod === 'transfer' ? 'selected' : ''}`}
                  onClick={() => handlePaymentMethodSelect('transfer')}
                >
                  <div className="payment-header">
                    <div className="payment-icon">üè¶</div>
                    <div className="payment-info">
                      <h4>Chuy·ªÉn kho·∫£n ng√¢n h√†ng</h4>
                      <p>Chuy·ªÉn kho·∫£n tr·ª±c ti·∫øp cho HomeHero</p>
                    </div>
                    <div className="payment-radio">
                      <input 
                        type="radio" 
                        name="paymentMethod"
                        value="transfer"
                        checked={paymentMethod === 'transfer'}
                        onChange={() => {}}
                      />
                    </div>
                  </div>
                  {paymentMethod === 'transfer' && (
  <VietQROfficial 
    selectedBooking={selectedBooking}
    bankInfo={bankInfo}
    copyToClipboard={copyToClipboard}
    handleTransferPayment={handleTransferPayment}
    transferConfirmed={transferConfirmed}
    paymentStatus={paymentStatus}
  />
)}
                </div>
              </div>
            </div>
          </>
        )}

        {/* Payment Support */}
        <div className="support-section">
          <h3>üÜò H·ªó tr·ª£ thanh to√°n</h3>
          <div className="support-options">
            <div className="support-item">
              <div className="support-icon">üìû</div>
              <div className="support-info">
                <h4>Hotline h·ªó tr·ª£</h4>
                <p>1900-xxxx (24/7)</p>
              </div>
            </div>
            
            <div className="support-item">
              <div className="support-icon">üí¨</div>
              <div className="support-info">
                <h4>Chat tr·ª±c tuy·∫øn</h4>
                <p>H·ªó tr·ª£ t·ª´ 8:00 - 22:00</p>
              </div>
            </div>
            
            <div className="support-item">
              <div className="support-icon">‚úâÔ∏è</div>
              <div className="support-info">
                <h4>Email h·ªó tr·ª£</h4>
                <p>support@homehero.vn</p>
              </div>
            </div>
          </div>
        </div>

        {/* Actions */}
        {paymentStatus === 'completed' && (
          <div className="actions-section">
            <button className="action-btn secondary">üìã Xem tr·∫°ng th√°i thanh to√°n</button>
            <button className="action-btn secondary">‚≠ê ƒê√°nh gi√° d·ªãch v·ª•</button>
            <button className="action-btn secondary">üè† V·ªÅ trang ch·ªß</button>
          </div>
        )}
      </div>
    </div>
  );
};

export default Payment;